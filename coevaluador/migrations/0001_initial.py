# Generated by Django 2.1.3 on 2018-11-19 16:04

import coevaluador.models
import coevaluador.utils
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('rut', models.CharField(error_messages={'unique': 'Ya existe un usuario con ese RUT.'}, help_text='El RUT puede contener caracteres "." y "-" pero no son necesarios.', max_length=50, primary_key=True, serialize=False, unique=True, validators=[coevaluador.utils.RutValidator()], verbose_name='rut')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', coevaluador.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('rut', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=50)),
                ('first_name', models.CharField(blank=True, max_length=100)),
                ('last_name', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Coevaluation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('status', models.CharField(max_length=50)),
                ('s_date', models.DateTimeField()),
                ('e_date', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='CoevaluationSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=100)),
                ('coevaluation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coevaluador.Coevaluation')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=30)),
                ('section', models.IntegerField()),
                ('year', models.IntegerField()),
                ('semester', models.IntegerField()),
                ('aides', models.ManyToManyField(blank=True, related_name='courses_as_aide', to=settings.AUTH_USER_MODEL)),
                ('auxiliaries', models.ManyToManyField(blank=True, related_name='courses_as_auxiliary', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CourseRecordForStudent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rol', models.CharField(max_length=100)),
                ('coevaluation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coevaluador.Coevaluation')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coevaluador.Course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TeamRecordForStudent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coevaluador.Course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WorkTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coevaluador.Course')),
            ],
        ),
        migrations.AddField(
            model_name='teamrecordforstudent',
            name='work_teams',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coevaluador.WorkTeam'),
        ),
        migrations.AddField(
            model_name='teammember',
            name='work_team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coevaluador.WorkTeam'),
        ),
        migrations.AddField(
            model_name='course',
            name='questions',
            field=models.ManyToManyField(blank=True, to='coevaluador.Question'),
        ),
        migrations.AddField(
            model_name='course',
            name='students',
            field=models.ManyToManyField(related_name='courses_as_student', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='course',
            name='teachers',
            field=models.ManyToManyField(related_name='courses_as_teacher', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='coevaluationsheet',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coevaluador.WorkTeam'),
        ),
        migrations.AddField(
            model_name='coevaluation',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coevaluador.Course'),
        ),
        migrations.AddField(
            model_name='coevaluation',
            name='question',
            field=models.ManyToManyField(to='coevaluador.Question'),
        ),
        migrations.AddField(
            model_name='answer',
            name='coevaluation_sheet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coevaluador.CoevaluationSheet'),
        ),
        migrations.AddField(
            model_name='answer',
            name='evaluated',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='answer',
            name='evaluator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluator', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='coevaluador.Question'),
        ),
    ]
